#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <AL/al.h>
#include <AL/alc.h>
#include <math.h>

#define BUFFER_SIZE 4096

#ifndef AL_FORMAT_MONO16
#define AL_FORMAT_MONO16 0x1101
#endif

int main(int argc, char **argv) {
    ALCdevice *device;
    ALCcontext *context;
    ALuint buffer, source;
    ALenum format;
    ALsizei size, freq;
    ALvoid *data;
    FILE *fp;
    char *file_path;

    if (argc < 2) {
        printf("Please provide a WAV file to play.\n");
        return 0;
    }

    file_path = argv[1];

    // Initialize OpenAL
    device = alcOpenDevice(NULL);
    context = alcCreateContext(device, NULL);
    alcMakeContextCurrent(context);

    // Create buffer
    alGenBuffers(1, &buffer);

    // Load WAV data into buffer
    fp = fopen(file_path, "rb");
    fseek(fp, 0, SEEK_END);
    size = ftell(fp);
    rewind(fp);
    data = malloc(size);
    fread(data, size, 1, fp);
    fclose(fp);

    // Get format, frequency, and data from WAV file
    alGetError();
    alBufferData(buffer, AL_FORMAT_MONO16, data, size, 44100);
    free(data);

    alGetBufferi(buffer, AL_SIZE, &size);
    alGetBufferi(buffer, AL_FREQUENCY, &freq);
    alGetBufferi(buffer, AL_BITS, &format);

    // Create source and attach buffer
    alGenSources(1, &source);
    alSourcei(source, AL_BUFFER, buffer);

    // Set source position to the left
    alSource3f(source, AL_POSITION, -1.0f, 0.0f, 0.0f);

    // Play audio
    alSourcePlay(source);


    // Wait for audio to finish playing
    ALint source_state;
    do {
        for (int i = 0; i < 360; i++) {
            float angle = (float)i * M_PI / 180.0f;
            float x = cos(angle);
            float y = sin(angle);
            alSource3f(source, AL_POSITION, x, y, 0.0f);
            usleep(50000);
        }
    } while (source_state == AL_PLAYING);

    // Loop to update source position and sleep for a short period
    // for (int i = 0; i < 360; i++) {
    //     float angle = (float)i * M_PI / 180.0f;
    //     float x = cos(angle);
    //     float y = sin(angle);
    //     alSource3f(source, AL_POSITION, x, y, 0.0f);
    //     usleep(10000);
    // }

    // Stop audio
    alSourceStop(source);

    // Clean up
    alDeleteSources(1, &source);
    alDeleteBuffers(1, &buffer);
    alcMakeContextCurrent(NULL);
    alcDestroyContext(context);
    alcCloseDevice(device);

    return 0;
}




 // Wait for audio to finish playing
    // ALint source_state;
    // do {

    //     for (int i = 0; i < 360; i++) {
    //         float angle = (float)i * M_PI / 180.0f;
    //         float x = cos(angle);
    //         float y = sin(angle);
    //         alSource3f(source, AL_POSITION, x, y, 0.0f);
    //         usleep(50000);
    //     }
    // } while (source_state == AL_PLAYING);

   
    // Stop audio
    //alSourceStop(source);

    // proposition to play sound

    // Initialize OpenAL
    ALCdevice* device = alcOpenDevice(NULL);
    ALCcontext* context = alcCreateContext(device, NULL);
    alcMakeContextCurrent(context);

    // Generate a source
    ALuint source;
    alGenSources(1, &source);

    // Set listener properties
    alListener3f(AL_POSITION, 0.0f, 0.0f, 0.0f);
    alListener3f(AL_VELOCITY, 0.0f, 0.0f, 0.0f);
    float orientation[] = { 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f };
    alListenerfv(AL_ORIENTATION, orientation);

    // Load and prepare audio data
    ALuint buffer;
    ALsizei size, frequency;
    ALenum format;
    load_audio("sound.wav", &buffer, &size, &frequency, &format);

    // Set source properties
    SoundP sound; // assume this is populated with the required values
    alSource3f(source, AL_POSITION, sound.xs, sound.ys, 0.0f);
    alSource3f(source, AL_VELOCITY, 0.0f, 0.0f, 0.0f);
    float direction[] = { sound.xp - sound.xs, sound.yp - sound.ys, 0.0f };
    alSourcefv(source, AL_DIRECTION, direction);
    alSourcef(source, AL_GAIN, 1.0f);
    alSourcei(source, AL_BUFFER, buffer);

    // Queue and play the audio
    alSourcePlay(source);

    // Wait for the audio to finish playing
    ALint status;
    do {
        alGetSourcei(source, AL_SOURCE_STATE, &status);
    } while (status == AL_PLAYING);









    gcc -Wall -Wextra test_sound.c -o test_sound -lopenal -lalut -lm -lpthread;




    ////////////////////////////////////////////12/05/2023///////////////////////////////////////////
            hit = 1;
            SoundP *sound_p = malloc(sizeof(SoundP));
          
            sound_p->type = 1; // type of the sound (wall)

            float dx = newPlayerX - p.x;
            float dy = newPlayerY - p.y;

            sound_p->distance = distanceBetweenPoints(p.x, p.y, newPlayerX, newPlayerY); // distance between player (listener) and sound source (wall)


            // calculate the angle between the player's direction and the sound
            float angle = atan2f(dy, dx);
            float facingAngle = DEG_TO_RAD(p.rotationAngle);
            float angleDiff = facingAngle - angle;

            // wrap the angle difference to [-180, 180] range
            if (angleDiff > M_PI)
            {
                angleDiff -= 2.0f * M_PI;
            }
            else if (angleDiff < -M_PI)
            {
                angleDiff += 2.0f * M_PI;
            }

            // invert the angle difference if the sound is behind the player
            angleDiff *= -p.walkDirection;

            // calculate the x, y positions of the audio source based on the player's position and rotation angle
            sound_p->soundX = dx + cosf(facingAngle + angleDiff) * sound_p->distance;
            sound_p->soundY = dy + sinf(facingAngle + angleDiff) * sound_p->distance;

            sound_p->gain = 0.5f;
    